// Модульність коду

/*
Модуль — це JavaScript-файл із фрагментом коду, 
який можна використовувати багато разів. Модуль 
експортує певні об'єкти, зробивши їх доступними 
для інших модулів.
*/ 

// ===============

// Експорт та імпорт за замовчуванням

/*
Основна ідея полягає в тому, що в одному модулі 
може бути лише один експорт за замовчуванням 
(default export). Це значення вважається 
"головним" значенням модуля, коли його 
імпортують в інші частини коду.
*/ 

// export default exportedValue

// Де:

// export default — ключова фраза для експорту;
// exportedValue — значення, яке експортується.


// Ось так виглядає синтаксис для 
// експорту значення за замовчуванням.

// const makeMessage = username => {
//   return `Welcome, ${username}!`;
// };

// export default makeMessage;

// ------

// Операція імпорту за замовчуванням 
// реалізована конструкцією import.

// import name from "..."

// Де:

// import і from — ключові фрази для імпорту;
// name — локальна змінна, в яку імпортується значення;
// **"..."** — відносний шлях до файлу модуля у вигляді рядка.

// // У будь-якому іншому файлі проєкту можна імпортувати значення за замовчуванням.

// import makeMessage from "./makeMessage";

// console.log(makeMessage("Jacob")); // "Welcom, Jacob!"

// ================

// Іменовані експорт та імпорт

/*
Іменований експорт (named export) — це спосіб 
експортування одного або кількох значень з 
модуля під конкретними іменами.
*/ 

// export exportedValue
/*
Де:

export — ключове слово для експорту;
exportedValue — значення, яке експортується.
*/ 

// export const makeMessage = username => {
//   return `Welcome, ${username}!`;
// };

// export const levels = ["ease", "medium", "hard"];

// -----------------

/*
Операція іменованого імпорту 
реалізована конструкцією з import.
*/ 

// import { name } from "..."

/*
Де:

import — вказує на суть операції;
from — на шлях до модуля з імпортованою сутністю;
name — ім'я змінної, яке повинно збігатися з 
іменем експорту в модулі;
"..." — шлях до файлу модуля у вигляді рядка.
*/ 

/*
У будь-якому іншому файлі проєкту можна 
імпортувати конкретні елементи з іншого 
файлу (модуля), використовуючи їх імена 
в конструкції іменованого імпорту.
*/ 

// import { makeMessage, levels } from "./makeMassege";

// console.log(makeMessage("Jacob"));
// console.log(levels);

/*
Іменований імпорт може бути корисним, коли 
є багато значень для експорту з одного модуля, 
і потрібно контролювати, які саме значення будуть 
імпортовані в іншому файлі. Без додаткових 
конструкцій не можна іменованим імпортом 
імпортувати сутність з іншого модуля, якщо вона 
в ньому була експортована за замовчуванням. Тобто 
іменований експорт імпортуємо тільки за допомогою 
іменованих імпортів.
*/ 

// ===========================

// Перейменування

/*
Rename export — це техніка, яка дозволяє 
імпортувати іменовані експортовані змінні, 
функції тощо з одного модуля до іншого, 
змінюючи їм ім’я під час імпорту.

Щоб задати нове ім'я під час імпорту з 
іншого модуля, використовується ключове слово as.
*/ 

// import { name as newName } from "..."

// ---------

// // Module myModule.js
// export const original = "Hello, World!";

// // Your current module, for example app.js
// import { original as renamed } from "./myModule.js"

// console.log(renamed); // Hello, World!

/*
У цьому прикладі ми імпортуємо змінну original 
з іншого модуля як renamed у нашому поточному 
модулі. Тепер ми можемо використовувати renamed 
у нашому коді, і воно буде посилатися на 
значення, яке експортується з original.
*/ 

/*
Коли використовувати перейменування? 

У бібліотеках або в інших модулях імена 
можуть бути довгими, досить загальними або 
конфліктувати з іменами змінних у твоєму 
поточному модулі. У цих випадках доцільно 
використовувати перейменування для 
зручності та уникнення конфліктів.
*/ 

// ========================

// Імпорт простору імен

/*
Імпорт простору імен (namespace import) — 
це техніка імпортування всього вмісту модуля 
як об'єкта з іменем, що представляє простір 
імен цього модуля. Це означає, що всі 
іменовані експорти з модуля стають 
властивостями цього об'єкта. Це зручно, коли 
потрібно імпортувати багато різних функцій, 
змінних або класів з модуля, не обираючи їх 
по одному.
*/ 

// // Module user.js
// export const name = "Mango";
// export const age = 26;
// export const email = "mango@mail.com";

// // Your current module
// import * as user from "./myModule.js";

// console.log(user.name); // "Mango" 
// console.log(user.age); // 26
// console.log(user.email); // "mango@mail.com"

/*
У цьому прикладі ми імпортуємо всі іменовані 
експорти з модуля user.js як об'єкт user. Усі 
іменовані експорти стають властивостями цього 
об'єкта. В результаті ми можемо звертатися до 
них через крапку.

Імпорт простору імен дозволяє уникнути конфліктів
імен між імпортованими об'єктами та іменами у 
твоєму поточному модулі. Це особливо корисно, коли 
ти працюєш з бібліотеками або модулями, де є багато 
іменованих експортів.
*/ 

// ===========================

