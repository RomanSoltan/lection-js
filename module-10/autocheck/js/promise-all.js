/* ======================================================================================================================
Метод Promise.all()
====================================================================================================================== */

/*Є ситуації, коли потрібно чекати на виконання 
всіх промісів одночасно, а потім обробляти їх 
результати. Або ситуації, коли достатньо 
дочекатися виконання хоча б одного з них, 
ігноруючи інші випадки. Для цих сценаріїв 
клас Promise має статичні методи для роботи 
з групою промісів.

Метод Promise.all() дозволяє одночасно обробити 
кілька промісів та отримати їхні результати. 
Він приймає масив промісів як вхідні дані, 
чекає їх виконання та повертає один проміс.*/

// Promise.all([promise1, promise2, promise3, ...])

/*Якщо всі проміси виконуються успішно, повернений 
проміс перейде у стан fulfilled, а його значенням 
буде масив результатів виконання кожного промісу.*/

// const p1 = Promise.resolve(1);
// const p2 = Promise.resolve(2);
// const p3 = Promise.resolve(3);

// Promise.all([p1, p2, p3])
//     .then(values => console.log(values)) // [1, 2, 3]
//     .catch(error => console.log(error));

/*Це означає, що він чекає на виконання всіх 
промісів, а потім створює та повертає новий 
проміс, значенням якого є масив значень 
виконаних промісів.

Якщо хоча б один із промісів відхиляється, 
повернений проміс одразу переходить у стан 
rejected, а його значенням буде помилка.*/

// const p1 = Promise.resolve(1);
// const p2 = Promise.reject("Rejected promise 2");
// const p3 = Promise.resolve(3);

// Promise.all([p1, p2, p3])
//     .then(values => console.log(values))
//     .catch(error => console.log(error)); // "Rejected promise 2"

/*Що повертає метод Promise.all?

Метод Promise.all чекає на виконання всіх 
промісів, а потім створює та повертає 
новий проміс, значенням якого є масив 
значень виконаних промісів.
// ----------

Коли виконається проміс, що повертається з Promise.all?

Коли виконаються всі проміси або буде відхилено хоча б один
  1) якщо всі проміси виконуються успішно, 
повернений проміс перейде у стан fulfilled, 
а його значенням буде масив результатів 
виконання кожного промісу 
  2) якщо хоча б один з промісів відхиляється, 
повернений проміс одразу переходить у стан 
rejected, а його значенням буде помилка
// -------------

Чи очікує метод Promise.all виконання решти 
промісів, якщо один проміс виконався з помилкою?

Promise.all очікує виконання всіх переданих 
промісів, і якщо хоча б один із промісів 
відхилено (завершено з помилкою), то 
Promise.all також відхилиться та поверне відхилення.*/ 

/* ======================================================================================================================
Метод Promise.allSettled()
====================================================================================================================== */

/*Метод Promise.allSettled() також дозволяє 
одночасно обробити кілька промісів та отримати 
їхні результати. Він приймає масив промісів 
як вхідні дані, чекає їх виконання та 
повертає один проміс.*/ 

// Promise.allSettled([promise1, promise2, promise3, ...])

/*Відмінність від Promise.all полягає в тому, 
що метод Promise.allSettled() 
ЧЕКАЄ ВИКОНАННЯ ВСІХ ПРОМІСІВ 
незалежно від того, чи були деякі або 
навіть всі проміси відхилені.*/ 

/*Повернутий проміс ніколи не буде відхилений, 
він завжди успішно виконується (стан fulfilled). 
Додавання методу catch навіть не має сенсу, 
оскільки він ніколи не виконається.*/ 

// const p1 = Promise.resolve(1);
// const p2 = Promise.reject("Rejected promise 2");
// const p3 = Promise.resolve(3);

// Promise.allSettled([p1, p2, p3])
//     .then(values => console.log(values));
//     // [
// 	//   { status: "fulfilled", value: 1}, 
//   //   { status: "rejected", value: "Rejected promise 2"},
//   //   { status: "fulfilled", value: 3}
//   // ]

/*Значенням повернутого промісу буде масив 
об'єктів з результатами виконання кожного промісу.

  1. status — властивість, яка зберігає 
статус, з яким виконався проміс, це 
рядок "fulfilled" або "rejected".
  2. value — властивість, в якій 
зберігається значення, з яким виконався 
або був відхилений проміс.*/ 

/*Що повертає метод Promise.allSettled?

Проміс
Метод Promise.allSettled приймає масив 
промісів як вхідні дані, чекає їх 
виконання та повертає один проміс.
// ------------

Коли виконається проміс, який 
повертається з Promise.allSettled?

Коли виконаються всі проміси.
Promise.allSettled виконається, коли 
виконаються всі передані проміси. Він 
чекає, доки вони завершать своє 
виконання, незалежно від того, чи вони 
виконуються успішно, чи відхилені.
// --------------------

Чи очікує метод Promise.allSettled 
виконання решти промісів, якщо один 
проміс виконався з помилкою?

Так.
Promise.allSettled очікує виконання 
всіх переданих промісів, незалежно 
від того, чи вони виконуються успішно, 
чи відхилені.*/

/* ======================================================================================================================
Метод Promise.race()
====================================================================================================================== */

/*Метод Promise.race приймає масив промісів і 
повертає "найшвидший", тобто перший виконаний 
або відхилений проміс з переданих, разом зі 
значенням або причиною його відхилення.*/ 

// Promise.race([promise1, promise2, promise3, ...])

/*Кейс 1

Створимо кілька промісів з різним часом виконання.*/ 

// const p1 = new Promise((resolve, reject) => {
//   setTimeout(() => resolve(1), 1000);
// });

// const p2 = new Promise((resolve, reject) => {
//   setTimeout(() => reject(2), 2000);
// });

// Promise.race([p1, p2])
//     .then(value => console.log(value)) // 1
//     .catch(error => console.log(error));

/*Перший проміс перейде в стан fulfilled 
через 1 секунду (буде найшвидшим), і буде 
виконано колбек методу then зі значенням 
першого промісу, а решту буде відкинуто.

Коли хоча б один проміс з масиву виконається, 
проміс, що повертається, перейде у стан 
resolved, а всі інші будуть відкинуті.*/ 

/*Кейс 2

Створимо кілька промісів з різним часом виконання.*/

// const p1 = new Promise((resolve, reject) => {
//   setTimeout(() => resolve(1), 2000);
// });

// const p2 = new Promise((resolve, reject) => {
//   setTimeout(() => reject(2), 1000);
// });

// Promise.race([p1, p2])
//     .then(value => console.log(value))
//     .catch(error => console.log(error)); // 2

/*Другий проміс перейде в стан rejected 
через 1 секунду (буде найшвидшим), 
виконається колбек методу catch зі значенням 
другого промісу, а інші будуть відкинуті.

Коли хоча б один проміс із масиву буде 
відхилений, проміс, що повертається, 
перейде в стан rejected, а всі інші 
будуть відкинуті.*/ 

/*Що повертає метод Promise.race?

Проміс.
Метод Promise.race повертає результат 
першого вирішеного (навіть якщо це 
відхилення) промісу з переданих йому промісів.
// -----------------

Чи очікує метод Promise.race на виконання інших 
промісів, якщо один проміс виконався?

Ні.
Метод Promise.race не очікує на виконання інших 
промісів, якщо один проміс уже вирішився.*/ 