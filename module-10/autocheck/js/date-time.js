/* ======================================================================================================================
Створення дати
====================================================================================================================== */

/*Вбудований клас Date безпосередньо спрощує 
більшу частину роботи з датами. Це дозволяє 
відображати моменти у часі як об'єкти і 
маніпулювати ними за допомогою заздалегідь 
визначених методів. Використовуючи можливості 
класу Date, можна створювати годинник, 
лічильники, календарі та інші інтерактивні 
елементи інтерфейсу.

Екземпляр класу Date — це об'єкт, що відображає 
певний момент часу. Створення дати без аргументів 
повертає об'єкт, що зберігає дату і час на момент 
його ініціалізації, тобто поточні дату і час.*/ 

// const date = new Date();

// console.log(date);

/*У рядковому перетворенні об'єкт повертає 
результат виклику вбудованого методу toString(), 
тому у першому лозі ми отримаємо рядок, а не об'єкт.*/ 

/*Що буде результатом виклику new Date() 
без аргументів?

Результатом виклику new Date() без аргументів 
буде об'єкт, що представляє поточні дату і час*/ 

/* ======================================================================================================================
Встановлення дати
====================================================================================================================== */

/*Створюючи екземпляр класу Date, можна 
налаштувати різні формати відображення 
даних. Нижче приклад, де до класу Date 
передають рядок, який описує тільки дату.*/ 

// const date = new Date("2030-03-16");
// console.log(date); // "Sat Mar 16 2030 00:00:00 GMT+0200"

/*Тут до Date передали рядок, де дата і 
час розділяються великою літерою T (time).*/ 

// const date = new Date("2030-03-16T14:25:00");
// console.log(date); // "Sat Mar 16 2030 14:25:00 GMT+0200"

/*Як ти бачиш, формат рядка, переданого 
до Date, дуже гнучкий.

Можна передати тільки рік, рік і місяць, 
або повну дату, включно з числом і часом.*/ 

// console.log(new Date("2030")); // "Tue Jan 01 2030 02:00:00 GMT+0200"
// console.log(new Date("2030-03")); // "Fri Mar 01 2030 02:00:00 GMT+0200"
// console.log(new Date("2030-03-16")); // "Sat Mar 16 2030 02:00:00 GMT+0200"
// console.log(new Date("2030-03-16T14:25:00")); // "Sat Mar 16 2030 14:25:00 GMT+0200"

/*Інший спосіб створення нової дати — 
це передати сім чисел, які описують рік, 
місяць (починається з 0), день, години, 
хвилини, секунди й мілісекунди. 
Обов'язкові тільки перші три.*/ 

// const date = new Date(2030, 2, 16, 14, 25, 0, 0);
// console.log(date); // "Sat Mar 16 2030 14:25:00 GMT+0200"

/* ======================================================================================================================
Unix час
====================================================================================================================== */

/*Для комп’ютерів відлік часу рахується в 
мілісекундах, що минули після опівночі 
1 січня 1970 року в часовому поясі UTC 
(Coordinated Universal Time). Це — Unix час.

Під час ініціалізації дати одним числом, 
воно являє собою кількість мілісекунд, 
що вже минула з 01.01.1970.*/ 

// console.log(new Date(0));
// // "Thu Jan 01 1970 03:00:00 GMT+0300 (Eastern European Standard Time)"

// console.log(new Date(15000));
// // "Thu Jan 01 1970 03:00:15 GMT+0300 (Eastern European Standard Time)"

/*Вбудований метод getTime() повертає числове 
значення цієї дати (timestamp) — кількість 
мілісекунд, що минула з півночі 1 січня 1970 року.*/ 

// const date = new Date();
// console.log(date.getTime()); // 1732041938958

/*Це число унікальне й ніколи не повториться, тому 
що момент часу унікальний і завжди тільки збільшується.

Зручність цього формату полягає в тому, що можна 
відображати точні моменти часу у вигляді одного 
числа і не турбуватися про дати, рядки й часові 
пояси. Адже можна отримати всю необхідну 
інформацію, коли необхідно.*/ 

/* ======================================================================================================================
Метод Date.now()
====================================================================================================================== */

/*Ми вже розглядали приклад створення об'єкта 
часу. У нього є метод getTime, який дозволяє 
отримати числове представлення моменту часу 
в кількості мілісекунд.*/ 

// const date = new Date();
// console.log(date.getTime());

/*У разі, коли все, що потрібно, це числове 
представлення моменту часу, немає сенсу 
створювати цілий об'єкт. Можна використовувати 
метод Date.now() — це швидкий і зручний спосіб 
отримати поточний час у вигляді мілісекунд*/

// const time = Date.now();

/*Основна ідея застосування Date.now() полягає 
у вимірюванні часу, розрахунку інтервалів тощо.

Якщо ти хочеш виміряти, скільки часу займає 
виконання деякого коду, можна зробити так:

1. Зберегти час до події.
2. Зберегти час після події.
3. Порахувати різницю між кінцевим і початковим часом.*/ 

// const startTime = Date.now();

// // Твій код, виконуваний упродовж деякого часу
// for(let i = 0; i <= 100000; i++) {
//   console.log(i);
// }

// const endTime = Date.now();
// const elapsedTime = endTime - startTime;

// console.log(`Elapsed time: ${elapsedTime} ms`);
// // "Elapsed time: 15685 ms"

/*Що повертає виклик методу Date.now()?

Повертає число*/ 

/* ======================================================================================================================
Геттери і сеттери
====================================================================================================================== */

/*Екземпляр класу Date має безліч методів для 
читання та запису значень дати і часу. Методи 
повертають або присвоюють рік, місяць, день 
місяця або тижня, годину, хвилину, секунду і 
мілісекунду для кожного екземпляра.

Геттери використовуються для читання всієї 
дати або окремої складової. Значення, що 
повертається, залежить від поточного часового 
поясу, встановленого на комп'ютері.*/

// const date = new Date("March 16, 2030 14:25:00")
// console.log("Date:", date);
// // "Sat Mar 16 2030 14:25:00 GMT+0200"

// // Повертає день місяця від 1 до 31
// console.log("Day:", date.getDate()); // Day: 16

// // Повертає день тижня від 0 до 6, починається з неділі
// console.log("Day of the week:", date.getDay()); // Day of the week: 6

// // Повертає місяць від 0 до 11
// console.log("Month:", date.getMonth()); // Month:  2

// // Повертає рік з 4 цифр
// console.log("Full year:", date.getFullYear()); // Full year: 2030

// // Повертає години
// console.log("Hours:", date.getHours()); // Hours: 14

// // Повертає хвилини
// console.log("Minutes:", date.getMinutes()); // Minutes: 25

// // Повертає секунди
// console.log("Seconds:", date.getSeconds()); // Seconds: 0

// // Повертає секунди
// console.log("Milliseconds:", date.getMilliseconds()); 
// // Milliseconds: 0

/*Все, що можна прочитати — можна записати, 
методи для запису починаються з префікса set.*/ 

// const date = new Date("March 16, 2030 14:25:00");

// date.setMinutes(50);
// console.log(date);
// // "Sat Mar 16 2030 14:50:00 GMT+0200"

// date.setFullYear(2040);
// console.log(date);
// // "Fri Mar 16 2040 14:50:00 GMT+0200"

// date.setMonth(4);
// console.log(date);
// // "Wed May 16 2040 14:50:00 GMT+0300"