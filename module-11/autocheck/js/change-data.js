/* ======================================================================================================================
CRUD
====================================================================================================================== */

/*Для взаємодії з ресурсами бекенду 
використовується чотири операції:

  1. створення (create),
  2. читання (read),
  3. оновлення (update),
  4. видалення (delete).
  
Для кожної з них визначений стандартний HTTP-метод.

  1. POST (Create) — створити новий ресурс.
  2. GET (Read) — отримати набір ресурсів 
або один ресурс за ідентифікатором.
  3. PUT і PATCH (Update) — оновити ресурс за ідентифікатором.
  4. DELETE (Delete) — видалити ресурс за ідентифікатором.

Будемо робити запити до JSONPlaceholder API, який 
надає колекцію постів у ресурсі 
[/posts](<https://jsonplaceholder.typicode.com/posts>), представлених об'єктами з властивостями id, title і body.*/ 

/* ======================================================================================================================
Читання
====================================================================================================================== */

/*HTTP-метод GET використовується для отримання 
існуючих даних.

Метод fetch() повинен відправити на сервер 
GET-запит без тіла. Бекенд після отримання 
запиту обробить його і у відповіді поверне 
необхідні ресурси.*/

/*
Отримання всієї колекції

Отримаємо масив усіх постів. З цією метою 
звертаємося до ресурсу /posts, описаного в 
документації бекенду. Метод fetch() за 
замовчуванням робить GET-запит, тому 
необов'язково перевизначати опції запиту.*/ 

// fetch("https://jsonplaceholder.typicode.com/posts")
//   .then((response) => {
//     if (!response.ok) {
//       throw new Error(response.status);
//     }
//     return response.json()
//   })
//   .then((posts) => console.log(posts))
//   .catch((error) => console.log(error));

/*Отримання одного елемента

Отримаємо один пост за ідентифікатором 
(властивість id), додавши його до ресурсу /posts/:postId.

Остання частина цього шляху (:postId) називається 
динамічний параметр і в документації описується 
як /ресурс/:параметр. Динамічні параметри 
виділяються двокрапкою : на початку. Вона 
використовується тільки для позначення, що це 
динамічний параметр, у сам рядок запиту вона не 
потрапляє. Використання динамічних параметрів 
сам ресурс (шлях до цілої колекції) не змінює, 
але змінюється значення динамічного параметра 
для кожного її елемента.*/ 

// Change this number to fetch different post

// const postId = 1;

// fetch(`https://jsonplaceholder.typicode.com/posts/${postId}`)
//   .then((response) => {
//     if (!response.ok) {
//       throw new Error(response.status)
//     }
//     return response.json();
//   })
//   .then(post => console.log(post))
//   .catch(error => console.log(error));

/*Вибери правильний URL для того, щоб отримати 
одну книгу з ідентифікатором 15 з колекції books

Відповідь:
my-api.com/books/15
*/

/* ======================================================================================================================
Створення
====================================================================================================================== */

/*Метод POST використовується для додавання 
нового ресурсу.

Для того щоб передати дані на сервер, 
використовується тіло HTTP-запиту — частина запиту, 
що містить дані, які передаються на сервер.

Тіло запиту може бути порожнім, якщо клієнт просто 
надсилає запит без додаткових даних. Однак у 
POST-запитах тіло містить корисну інформацію, 
таку як дані форми, JSON-об'єкти, файли або будь-які 
інші дані, які сервер повинен обробити. Заголовок 
Content-Type вказує на тип даних у тілі запиту і 
допомагає серверу правильно їх обробити.

Метод fetch() повинен відправити POST-запит на 
сервер, у тілі якого буде об'єкт з полями title і 
body, ідентифікатор буде автоматично створений 
бекендом. Результатом такого запиту буде об'єкт, 
доданий у базу даних бекенда.*/ 

// const postToAdd = {
//   title: "CRUD",
//   body: "CRUD is owesome!",
// };

// const options = {
//   method: "POST",
//   body: JSON.stringify(postToAdd),
//   headers: {
//     "Content-Type": "application/json; charset=UTF-8",
//   },
// };

// fetch("https://jsonplaceholder.typicode.com/posts", options)
//   .then((response) => {
//     if (!response.ok) {
//       throw new Error(response.statusText);
//     }
//     return response.json();
//   })
//   .then(post => console.log(post))
//   .catch(error => console.log(error));

/*У прикладі вище ми:

  1. Робимо запит на створення поста, звертаючись 
до ресурсу /posts, але в об’єкті налаштування 
options методу fetch() змінюємо HTTP-метод на 
POST. Таким чином, бекенд знає, що потрібно не 
прочитати вже існуючий, а створити новий ресурс 
у цій колекції.
  2. Тіло запиту повинно бути рядком, тому 
що протокол HTTP передає все як текст. При передачі 
складних типів даних, їх обов'язково необхідно 
привести до рядка методом JSON.stringify().
  3. Не забуваємо вказати заголовок Content-Type, 
який уточнює для бекенду тип переданих даних.*/ 

/*У відповідь, якщо все добре, отримаємо JSON 
представлення новоствореного поста, але вже з 
доданим id. Ідентифікатор буде унікальним для 
кожного об'єкта.*/ 

// {
//   "id": 101,
//   "title": "CRUD",
//   "body": "CRUD is awesome!"
// }

/*
Питання
У якій частині запиту передаються дані для 
створення нового елемента ресурсу на бекенді?

Відповідь
Дані, які потрібні для створення нового елемента 
ресурсу, зазвичай містяться в тілі запиту. Це 
можуть бути дані форми, JSON-об'єкти або інші 
структури даних, які сервер може обробити.*/ 

/* ======================================================================================================================
Оновлення 
====================================================================================================================== */

/*Методи PUT і PATCH використовуються для 
оновлення існуючих даних.

За HTTP-стандартом:

  1. метод PATCH замінює в наявному ресурсі значення,
які були передані в тілі запиту. Значення ресурсу, 
які не передавались, лишаться без змін;
  2. метод PUT повністю замінює ресурс. Значення 
ресурсу, які не передавались, видаляються з ресурсу.

Який саме метод використовувати, буде написано в 
документації бекенду.

Метод fetch() повинен відправити на сервер запит, у 
тілі якого необхідно вказати об'єкт із полями для 
зміни. Шлях вказує, у якій колекції і який елемент 
потрібно оновити. Бекенд після отримання запиту 
обробить його і у відповіді поверне оновлений ресурс*/ 

// // Change value of id property to update different post
// const postToUpdate = {
//   id: 1,
//   body: "CRUD is really awesome!",
// };

// const options = {
//   method: "PATCH",
//   body: JSON.stringify(postToUpdate),
//   headers: {
//     "Content-Type": "application/json; charset=UTF-8",
//   },
// };

// fetch(`https://jsonplaceholder.typicode.com/posts/${postToUpdate.id}`, options)
//   .then((response) => {
//     if (!response.ok) {
//       throw new Error(response.status);
//     }
//     return response.json();
//   })
//   .then(post => console.log(post))
//   .catch(error => console.log(reeor));

/*
У відповідь, якщо все добре, отримаємо оновлений об'єкт.*/ 

// {
//   id: 1,
//   title: "CRUD",
//   body: "CRUD is really awesome!",
// }

/* ======================================================================================================================
Видалення
====================================================================================================================== */

/*Метод DELETE використовується для 
видалення існуючих даних.

Метод fetch() повинен відправити на сервер 
DELETE-запит без тіла. Шлях вказує, у якій 
колекції і який елемент ми хочемо видалити.

Бекенд після отримання запиту обробить його, 
видалить ресурс із колекції і у відповіді 
поверне статус результату і видалений елемент.*/

// const postIdToDelete = 1;

// fetch(`https://jsonplaceholder.typicode.com/posts/${postIdToDelete}`, {
//   method: "DELETE",
// })
//   .then((response) => {
//     if (!response.ok) {
//       throw new Error(response.status);
//     }
//     return response.json();
//   })
//   .then((deletedPost) => console.log(deletedPost))
//   .catch(error => console.log("Error:", error));
