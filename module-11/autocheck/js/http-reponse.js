/* ======================================================================================================================
HTTP-запити
====================================================================================================================== */

/*Сервер — це комп'ютер зі спеціальним 
програмним забезпеченням.

Бекенд — це програма, розташована на сервері, 
яка здатна обробити вхідні HTTP-запити і має 
набір готових дій на певні запити.

API (інтерфейс прикладного програмування) — 
набір чітко визначених правил зв'язку між 
різними програмними компонентами. Інтерфейс 
описує, що можна попросити програму зробити 
і що буде в результаті.

REST (representational state transfer) — стиль 
бекенд-архітектури. Він ґрунтується на наборі 
принципів, які описують, яким чином визначаються 
й адресуються мережеві ресурси.

REST API — бекенд побудований за принципом REST. 
Слугує прошарком між вебзастосунком і базою даних. 
Має стандартний інтерфейс для звернення до ресурсів. 
Працює як вебсайт, ми посилаємо HTTP-запит із 
клієнта на сервер, а у відповідь, замість 
HTML-сторінки, отримуємо дані в JSON-форматі.

Існують тисячі бекендів, і кожен з них унікальний. 
З іншого боку, REST API побудовані за стандартною 
архітектурою. Отже, можна зрозуміти принцип їх 
роботи, після чого все, що потрібно зробити — 
це ознайомитися з документацією того бекенду, 
який необхідно використовувати.*/

/* ======================================================================================================================
Шлях до ресурсу
====================================================================================================================== */

/*Запити на бекенд повинні містити шлях до ресурсу, 
над яким виконується операція. Доступні шляхи 
(ендпоінти, ресурси) описуються в документації бекенду.

Ендпоінти (англ. endpoints) в контексті вебсервісів 
та API — це конкретні URL-адреси, через які можна 
отримати доступ до певних функцій або ресурсів 
сервера. Вони служать точками входу для взаємодії 
між клієнтом і сервером, дозволяючи отримувати, 
надсилати, оновлювати чи видаляти дані.

Давай розберемо це на прикладі JSONPlaceholder API. 
Це публічний REST API для швидкого прототипування,
який надає кілька різних колекцій уявних даних.*/ 

// https://jsonplaceholder.typicode.com/users

/*Такий шлях (ендпоінт) явно вказує на ресурс, 
навіть якщо ми його ніколи раніше не бачили. 
Такий URL шлях є ієрархічним і описовим. Ми 
виконуємо запит на REST API для отримання ресурсу /users.


Цей шлях складається з таких частин:

  1. https://jsonplaceholder.typicode.com — 
це базовий URL, точка входу в API.
  2. /users — ресурс, до якого звертаємося.


Візьми і встав цей шлях в адресний рядок 
браузера та перейди за ним.

Браузер виконає HTTP-запит, але замість HTML-файлу 
у відповіді прийде JSON з даними, який відобразиться 
у вкладці як звичайний текст (див. схему).*/ 

// [
//   {
//     "id": 1,
//     "name": "Leanne Graham",
//     "username": "Bret",
//     "email": "Sincere@april.biz",
//     "address": {
//       "street": "Kulas Light",
//       "suite": "Apt. 556",
//       "city": "Gwenborough",
//       "zipcode": "92998-3874",
//       "geo": {
//         "lat": "-37.3159",
//         "lng": "81.1496"
//       }
//     },
//     "phone": "1-770-736-8031 x56442",
//     "website": "hildegard.org",
//     "company": {
//       "name": "Romaguera-Crona",
//       "catchPhrase": "Multi-layered client-server neural-net",
//       "bs": "harness real-time e-markets"
//     }
//   },
// ]

/* ======================================================================================================================
Fetch API
====================================================================================================================== */

/*Fetch API — це інтерфейс, який вбудований у 
браузер і доступний через об'єкт window. Він 
надає набір властивостей і методів, які 
дозволяють відправляти, отримувати та обробляти 
ресурси із сервера.


Метод fetch() надає сучасний інтерфейс для 
формування запитів до сервера і побудований 
на промісах.*/ 

// fetch(url, options)

/*
  1. url — шлях до даних на бекенді, які необхідно 
отримати, створити або змінити. Обов'язковий аргумент.
  2. options — об'єкт налаштувань запиту: метод, 
заголовки, тіло тощо. Необов'язковий аргумент.


JSONPlaceholder API — це вебсервіс, який містить 
декілька ресурсів (користувачів, продуктів тощо).

У прикладі нижче будемо робити запит до 
нашого вебсервісу, щоб отримати колекцію 
користувачів (ресурс /users).*/ 

// fetch("https://jsonplaceholder.typicode.com/users")
//   .then(response => {
//     // Response handling
//   })
//   .then(data => {
//     // Data handling
//   })
//   .catch(error => {
//     // Error handling
//   });

/*
Метод fetch повертає проміс, тому до результату 
його виклику додаємо ланцюжок методів then() 
і catch() для обробки відповіді.

Що повертає виклик функції fetch?

Проміс*/

/* ======================================================================================================================
Вкладка Network
====================================================================================================================== */

/*В інструментах розробника на вкладці Network 
(укр. “Мережа”) відображаються всі HTTP-запити, 
що виконуються на сторінці. Їх може бути корисно 
переглянути у разі, коли розробнику потрібно 
перевірити деталі запиту на бекенд.

Як це зробити?

  1. Вибери фільтр асинхронні HTTP/HTTPS-запити, 
зроблені за допомогою Fetch API або XMLHttpRequest, 
XHR або Fetch/XHR — так залишаться тільки асинхронні 
HTTP/HTTPS-запити, зроблені за допомогою Fetch 
API або XMLHttpRequest.
  2. Після запуску скрипта з викликом методу fetch, 
через деякий час запит відобразиться у списку.
  3. Вибери цей запит, щоб подивитися всю інформацію 
по ньому на підвкладках Headers (укр. “Заголовки”), 
Preview (укр. “Попередній перегляд”) 
і Response (укр. “Відповідь”).*/ 

/* ======================================================================================================================
Коди відповідей
====================================================================================================================== */

/*
На запит клієнта сервер відправляє відповідь, 
яка містить код стану, щоб інформувати клієнта 
про результат операції.

Код відповіді можна подивитися на вкладці 
Network у полі Status Code.

Коди діляться на групи залежно від того, з 
якої цифри починається код помилки.



1XX — мають інформаційне призначення.
2XX — коди успішного проведення операції.
3XX — описують усе, що пов'язано з перенаправленням (redirect).
4XX — вказують на помилки з боку клієнта.
5XX — вказують на помилки з боку сервера.


Немає потреби пам'ятати всі коди з кожної групи, 
достатньо знати найпоширеніші. Решту завжди можна 
подивитися в довіднику HTTP-кодів.



  200 (OK) — стандартна відповідь для успішних HTTP-запитів.
  201 (Created) — стандартна відповідь для HTTP-запиту, 
який привів до успішного створення ресурсу.
  400 (Bad Request) — запит не може бути оброблений 
через неправильний синтаксис запиту або іншу помилку клієнта.
  401 (Unauthorized) — для доступу до ресурсу 
  вимагається авторизація.
  403 (Forbidden) — у клієнта немає дозволу на доступ 
до цього ресурсу.
  404 (Not Found) — у цей час ресурс не знайдений. 
Можливо, він був видалений або ще не існує.
  500 (Internal Server Error) — загальна відповідь 
на непередбачений збій сервера, якщо відсутня 
конкретніша інформація.

Вибери код відповіді, який відповідає успішному запиту

Успішний запит зазвичай відповідає статусному коду 200.*/

/* ======================================================================================================================
Перевірка відповіді
====================================================================================================================== */

