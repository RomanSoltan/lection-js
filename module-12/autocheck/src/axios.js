/* ======================================================================================================================
Встановлення
====================================================================================================================== */
/*Бібліотека Axios — це простий HTTP-клієнт, 
що базується на Promise і автоматизує багато 
рутинних завдань при роботі з HTTP-запитами, 
а саме дозволяє:

  1. зберігати глобальні налаштування, 
що будуть автоматично додаватися до всіх запитів;
  2. автоматично перетворювати дані запиту у формат JSON;
  3. парсити дані відповіді з формату JSON;
  4. обробляти всі можливі помилки запиту, 
включаючи 404, та багато іншого.

Axios є зручною альтернативою стандартному Fetch API.

Для встановлення Axios як бібліотеки скористайся NPM:*/

// npm install axios;

/*Для використання додай імпорт за замовчуванням 
у своєму JavaScript-файлі, у якому ти плануєш 
використовувати Axios.*/

// import axios from 'axios';

/* ======================================================================================================================
Синтаксис запиту
====================================================================================================================== */

/*Запити можна робити, викликавши axios і 
передаючи відповідний об'єкт конфігурації. 
Напишемо код, який виконує GET-запит.*/

// import axios from "axios";

// axios({
//   method: "get",
//   url: "https://jsonplaceholder.typicode.com/users",
// });

/*Після виконання функції axios ми отримуємо 
проміс, який обробляємо стандартними 
методами then і catch.*/

// import axios from 'axios';
// axios({
//   method: 'get',
//   url: 'https://jsonplaceholder.typicode.com/users',
// })
//   .then(response => console.log(response))
//   .catch(error => console.log(error));

/*Що повертає виклик функції axios()?

Проміс*/

/* ======================================================================================================================
Псевдоніми методів запиту
====================================================================================================================== */

/*
У бібліотеці Axios існують псевдоніми (однойменні методи) 
для всіх підтримуваних методів запиту, які спрощують 
синтаксис запиту та додають стандартні налаштування.

Візьмемо вже відомий нам код GET-запиту.*/

// import axios from 'axios';

// axios({
//   method: 'get',
//   url: 'https://jsonplaceholder.typicode.com/users',
// })
//   .then(response => console.log(response))
//   .catch(error => console.log(error));

// ---------------

/*Метод axios.get(url[, config]) є спрощеним 
способом виконання GET-запиту.
Квадратні дужки позначають необов'язковий 
аргумент у документації і не є частиною коду.*/

// import axios from "axios";

// axios.get('https://jsonplaceholder.typicode.com/users')
//   .then(response => console.log(response))
//   .catch(error => console.log(error));

/*Отже, метод axios.get потребує обов'язково лише 
адреси запиту, а метод GET автоматично підставляється 
сам. Крім того, Axios додає до запиту стандартні 
HTTP-заголовки, наприклад, Accept, у якому вказує 
application/json, оскільки найчастіше ми очікуємо 
саме JSON від сервера.

Який метод бібліотеки Axios виконає GET запит?

axios.get()
Метод axios.get(url[, config]) є спрощеним способом виконання GET-запиту.*/

/* ======================================================================================================================
Об'єкт відповіді
====================================================================================================================== */

/*Об'єкт відповіді на запит містить наступну інформацію.*/

// {
//   data: {},
//   status: 200,
//   statusText: 'OK',
//   headers: {},
//   config: {},
//   request: {}
// }

/*
- data — відповідь, надана сервером;
- status — код стану HTTP з відповіді сервера;
- statusText — повідомлення про стан HTTP від відповіді сервера;
- headers — заголовки HTTP, з якими відповів сервер;
- config — конфігурація, яка була надана Axios для запиту;
- request — запит, який створив цю відповідь;*/

/*У методі then ти отримаєш наступні властивості 
в об'єкті відповіді.*/

// import axios from "axios";

// axios.get("https://jsonplaceholder.typicode.com/users")
//   .then(response => {
//     console.log(response.data);
//     console.log(response.status);
//     console.log(response.statusText);
//     console.log(response.headers);
//     console.log(response.config);
//   })
//   .catch(error => {
//     console.log(error);
//   });

/*Зверни увагу, на властивість data, у якій 
зберігаються дані відповіді.

На відміну від fetch, нам не потрібно парсити 
дані відповіді методом response.json(). Це 
робиться автоматично і додається до властивості 
data. Крім того, не потрібно перевіряти статус 
відповіді у властивості response.ok. Бібліотека 
Axios робить це автоматично і відхиляє проміс з 
помилкою для будь-якого невдалого HTTP-коду 
відповіді, включаючи 404.

Питання?
У якій властивості об’єкта відповіді response 
зберігаються дані?

response.data
Дані зберігаються у властивості data.
*/

/* ======================================================================================================================
Конфігурація за замовчуванням
====================================================================================================================== */

/*Уяви ситуацію, коли в тебе є кілька запитів з 
однаковою базовою адресою сервера, але до 
різних ресурсів. Розробнику доводиться повторювати 
базову адресу (https://jsonplaceholder.typicode.com) 
у коді кожного запиту, що не дуже зручно.*/

// axios.get("https://jsonplaceholder.typicode.com/users")
//   .then()
//   .catch();

// axios.get("https://jsonplaceholder.typicode.com/posts")
//   .then()
//   .catch();

// axios.get("https://jsonplaceholder.typicode.com/images")
//   .then()
//   .catch();

/*Можна вказати стандартні налаштування конфігурації 
у властивості axios.defaults, які будуть застосовані 
до кожного запиту. Властивість axios.defaults.baseURL 
відповідає за збереження базової адреси для всіх 
HTTP-запитів.*/

// import axios from "axios";

// axios.defaults.baseURL = 'https://jsonplaceholder.typicode.com';

/*Тепер код запитів можна переписати так, як ти бачиш 
у прикладі нижче — вказавши лише частину адреси після 
базової. При виконанні запитів Axios автоматично 
додасть значення baseURL до кожного запиту.*/

// import axios from "axios";

// axios.defaults.baseURL = "https://jsonplaceholder.typicode.com";

// axios.get("/users").then().catch();

// axios.get("/posts").then().catch();

// axios.get("/images").then().catch();

/*У якій властивості зберігається загальна 
конфігурація для всіх запитів?

Властивість axios.defaults. відповідає за 
збереження загальної конфігурації для всіх запитів.*/ 

/* ======================================================================================================================
Заголовки за замовчуванням
====================================================================================================================== */

/*Окрім базової адреси, можна також вказати 
необхідні стандартні заголовки запиту. 
Наприклад, якщо у тебе є унікальний ключ API, 
який необхідно додавати до кожного запиту у 
вигляді HTTP-заголовка, ти можеш додати його 
до властивості axios.defaults.headers.common*/

// import axios from 'axios';
// const myApiKey = "secret-api-key-for-every-request";
// axios.defaults.headers.common["header-name"] = myApiKey;

/*Замість рядка "header-name" вказуємо потрібну 
назву заголовка у вигляді рядка.

Іншими словами, ми буквально додаємо нову 
властивість із ключем "header-name" до об'єкта 
axios.defaults.headers.common. Після цього Axios 
автоматично додасть цей заголовок із вказаним 
значенням до кожного запиту.

----------------

У якій властивості зберігаються стандартні 
заголовки для всіх запитів?

Стандартні заголовки для всіх запитів у 
бібліотеці Axios зберігаються у властивості 
axios.defaults.headers*/ 

/* ======================================================================================================================
Параметри рядка запиту
====================================================================================================================== */

/*Для додавання параметрів рядка запиту до 
запиту існує кілька способів.

  1. Ти, звісно, можеш вказати їх у URL.*/ 

// axios.get("https://jsonplaceholder.typicode.com/users?_limit=7&_sort=name");

/* 
  2. Або використати клас URLSearchParams.*/

// const searchParams = new URLSearchParams({
//   _limit: 5,
//   _sort: "name",
// });

// axios.get(`https://jsonplaceholder.typicode.com/users?${searchParams}`);

/*
  3. Але Axios надає нам зручніший спосіб. 
В об'єкті конфігурації (параметр config) ти можеш 
вказати об'єкт параметрів у властивості params.*/ 

// axios.get("https://jsonplaceholder.typicode.com/users", {
//   params: {
//     _limit: 7,
//     _sort: "name"
//   }
// });

/*Axios використовує цей об'єкт, щоб за допомогою 
URLSearchParams додати рядок запиту з параметрами до адреси.*/ 
